@page "/"
@using Auricular.Client.MediaPlayer
@using Auricular.Client.Services
@using Auricular.DataTransfer
@attribute [Authorize]
@inject PlayerState Player
@inject BrowsingService BrowsingService
@inject AlbumSongListService AlbumSongListService
@inject MediaRetrievalService MediaRetrievalService

<PageTitle>Index</PageTitle>

<h1>Audiobooks</h1>

<ul>
    @if(Albums is Album[] albums) {
        foreach(var item in albums) {
            <li title="@item.Title">
                <a href="audiobook/@item.Id">
                    <img src="@MediaRetrievalService.GetCoverArtUri(item.CoverArtId.Value)" class="cover-art" />
                    <p>
                        <a @onclick="async () => await ItemClicked(item)" @onclick:preventDefault="true">
                            <span class="oi oi-play-circle"></span>
                        </a>
                        @item.Title
                    </p>
                </a>
            </li>
        }
    } else {
        @:Loading...
    }
</ul>

@code {
    protected Album[]? Albums { get; set; }

    protected override async Task OnInitializedAsync() {
        // Wait for API to start
        for (int i = 0; i < 5; i++) {
            try {
                Albums = await AlbumSongListService.GetAlbums();
                break;
            } catch {
                await Task.Delay(500);
            }
        }

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private async Task ItemClicked (Album item) {
        var response = await BrowsingService.GetDirectory(item.Id.Value);

        var playlist = new Auricular.Client.MediaPlayer.Playlist(response.Items!
            .Select(i => new PlaylistItem {
                Id = i.Id.Value,
                TrackSpecified = i.TrackSpecified,
                Track = i.Track,
                Title = i.Title,
                Duration = i.Duration,
                DurationSpecified = i.DurationSpecified,
            })
            .ToArray());

        await Player.Play(playlist);
    }
}
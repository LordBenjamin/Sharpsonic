@page "/audiobook/{id:int}"
@using Auricular.Client.MediaPlayer
@using Auricular.Client.Services
@using Auricular.DataTransfer
@inject PlayerState Player
@inject BrowsingService BrowsingService
@inject MediaRetrievalService MediaRetrievalService

<PageTitle>@BookTitle</PageTitle>

<h1>@BookTitle</h1>

@if (Id is int id) {
  <img src="@MediaRetrievalService.GetCoverArtUri(id)" style="width: 250px" />
}

<h2>Chapters</h2>

<ul>
@foreach(var item in Playlist.Items) {
    <li style="list-style-type: none;">
        <a @onclick="async () => await ItemClicked(item)" style="cursor: pointer">
            <span class="oi oi-play-circle"></span>
        </a>
        @(item.TrackSpecified ? $"{item.Track}  - " : string.Empty) @item.Title @(item.DurationSpecified ? string.Format("{0:D2}:{1:D2}", (int) item.Duration.TotalMinutes, item.Duration.Seconds) : string.Empty)</li>
}
</ul>

@code {
    public string BookTitle { get; set; } = "Loading";

    [Parameter]
    public int? Id { get; set; }

    public Auricular.Client.MediaPlayer.Playlist Playlist { get; set; } = Auricular.Client.MediaPlayer.Playlist.Empty;

    protected override async Task OnParametersSetAsync() {
        if (Id is int id) {
            await LoadBook(id);
        }

        await base.OnParametersSetAsync();
    }

    private async Task LoadBook(int id) {
        DirectoryListingResponse response = await BrowsingService.GetDirectory(id);
        BookTitle = response.Name;

        Playlist = new Auricular.Client.MediaPlayer.Playlist(response.Items!
            .Select(i => new PlaylistItem {
                Id = i.Id.Value,
                TrackSpecified = i.TrackSpecified,
                Track = i.Track,
                Title = i.Title,
                Duration = i.Duration,
                DurationSpecified = i.DurationSpecified,
            })
            .ToArray());
    }

    private async Task ItemClicked(PlaylistItem item) {
        await Player.Play(item);
    }
}

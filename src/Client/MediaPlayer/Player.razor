@inject PlayerState PlayerState;
@implements IDisposable

<div style="width:100%; text-align:center; padding-top:10px">
    <p>@PlayerState?.NowPlaying</p>
    @if (PlayerState?.StreamUri is not null) {
        @if (PlayerState.IsPlaying == true) {
            <a @onclick="async () => await Stop()" style="cursor: pointer">
                <span class="oi oi-media-stop"></span>
            </a>
        } else {
            <a @onclick="async () => await Play()" style="cursor: pointer">
                <span class="oi oi-play-circle"></span>
            </a>
        }
    }
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        PlayerState.PlayerStateChanged += Player_StateChanged;
        return base.OnInitializedAsync();
    }

    public async Task Play() {
        await PlayerState.Play(PlayerState.StreamUri, PlayerState.NowPlaying);
    }

    public async Task Stop() {
        await PlayerState.Stop();
    }

    private void Player_StateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        PlayerState.PlayerStateChanged -= Player_StateChanged;
    }
}
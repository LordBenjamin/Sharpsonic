@using Auricular.DataTransfer
@inject PlayerState PlayerState;
@implements IDisposable

<div class="player-outer">
    <div class="title-area">
        <div>@PlayerState?.CurrentItem?.Title</div>
        <div>
            <input type="checkbox" @bind-value=@ShouldStopAtEndOfChapter id="sleep-stop" />
            <label for="sleep-stop">Sleep mode</label>
        </div>
    </div>

    <div class="play-pause-area">
        @if (PlayerState?.StreamUri is not null)
        {
            @if (PlayerState.IsPlaying == true)
            {
                <a @onclick="async () => await Pause()" class="link-ptr">
                    <span class="oi oi-media-pause media-control-button"></span>
                </a>
            }
            else
            {
                <a @onclick="async () => await Play()" class="link-ptr">
                    <span class="oi oi-play-circle media-control-button"></span>
                </a>
            }
        }
    </div>

    <div class="seek-area">
        <SeekBar Player=@PlayerState />
    </div>
</div>

@code {
    public bool ShouldStopAtEndOfChapter {
        get { return PlayerState?.ShouldStopAtEndOfChapter ?? false; }
        set {
            if(PlayerState is PlayerState player) {
                player.ShouldStopAtEndOfChapter = value;
            }
        }
    }

    protected override Task OnInitializedAsync()
    {
        PlayerState.PlayerStateChanged += Player_StateChanged;
        return base.OnInitializedAsync();
    }

    public async Task Play()
    {
        await PlayerState.Play();
    }

    public async Task Pause()
    {
        await PlayerState.Pause();
    }

    public async Task Stop()
    {
        await PlayerState.Stop();
    }

    private void Player_StateChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        PlayerState.PlayerStateChanged -= Player_StateChanged;
    }
}
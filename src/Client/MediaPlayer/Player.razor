@using Auricular.DataTransfer
@inject PlayerState PlayerState;
@implements IDisposable

<div style="width:100%; text-align:center; padding-top:10px">
    <div>
        <p>@PlayerState?.CurrentItem?.Title</p>
        <p>@PlayerState?.CurrentItem?.Album</p>
        <p>@PlayerState?.CurrentItem?.Artist</p>

        @if (PlayerState?.StreamUri is not null)
        {
            @if (PlayerState.IsPlaying == true)
            {
                <a @onclick="async () => await Stop()" style="cursor: pointer">
                    <span class="oi oi-media-stop media-control-button"></span>
                </a>
            }
            else
            {
                <a @onclick="async () => await Play()" style="cursor: pointer">
                    <span class="oi oi-play-circle media-control-button"></span>
                </a>
            }
        }
    </div>
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        PlayerState.PlayerStateChanged += Player_StateChanged;
        return base.OnInitializedAsync();
    }

    public async Task Play()
    {
        if (PlayerState.CurrentItem is PlaylistItem item)
        {
            await PlayerState.Play(item);
        }
    }

    public async Task Stop()
    {
        await PlayerState.Stop();
    }

    private void Player_StateChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        PlayerState.PlayerStateChanged -= Player_StateChanged;
    }
}